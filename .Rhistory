ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_data[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
results_dt$mean_distance <- c(-40, -24, -8, 8, 24, 40)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "darkgreen"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Forest Extent"
) +
theme_minimal(base_size = 14) +
scale_x_continuous(
breaks = c(-40, -24, -8, 8, 24, 40)
) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)
)
ggsave(
filename = file.path(
out_dir,
sprintf("neighs_tree.png")
),
plot   = p,
width  = 8,
height = 6,
dpi    = 300
)
################################################################################
################################################################################
#######################Neighbors Analysis from borders protected areas ########
seldata <- data[protected_areas_sd==2]
path <- file.path(micro, "neighbours.csv")
neighs <- fread(path)
regreen <- neighs[refer == "green",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
regreen$distance_km <- regreen$distance_km*-1
regreen[, quintile := cut(
distance_km,
breaks = c(0, -16, -32, -50),
include.lowest = TRUE,
labels = c(3, 2, 1)
)]
regreen$quintile <- as.numeric(regreen$quintile)
table(regreen$quintile)
regreen$quintile <- regreen$quintile *-1
# regreen[, quintile := cut(
#   distance_km,
#   breaks = quantile(distance_km, probs = seq(0, 1, 0.33), na.rm = TRUE),
#   include.lowest = TRUE,
#   labels = FALSE
# )]
# regreen$quintile <- regreen$quintile*-1
refp <- neighs[refer == "purple",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
refp[, quintile := cut(
distance_km,
breaks = c(0, 16, 32, 50),
include.lowest = TRUE,
labels = c(1, 2, 3)
)]
refp$quintile <- as.numeric(refp$quintile)
table(refp$quintile)
neighs_seldata <- rbind(regreen, refp )
# Step 1: Clean names
setnames(
neighs_seldata,
old = c("pc11_s_id_neigh", "pc11_d_id_neigh", "pc11_sd_id_neigh"),
new = c("pc11_s_id", "pc11_d_id", "pc11_sd_id")
)
# Step 2: Quintiles of distance_km
# Keep track of which subdistricts have already been used
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_seldata$quintile))) {
ids_q <- unique(neighs_seldata[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
seldata,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "peragri",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c( "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_seldata[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
results_dt$mean_distance <- c(-40, -24, -8, 8, 24, 40)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "darkgreen"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Agriculture Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
scale_x_continuous(
breaks = c(-40, -24, -8, 8, 24, 40)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)
)
ggsave(
filename = file.path(
out_dir,
sprintf("neighs_agri_pro.png")
),
plot   = p,
width  = 8,
height = 6,
dpi    = 300
)
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_seldata$quintile))) {
ids_q <- unique(neighs_seldata[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
seldata,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "tree.mcq",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_seldata[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
results_dt$mean_distance <- c(-40, -24, -8, 8, 24, 40)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "darkgreen"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Forest Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)
)
ggsave(
filename = file.path(
out_dir,
sprintf("neighs_tree_pro.png")
),
plot   = p,
width  = 8,
height = 6,
dpi    = 300
)
################################################################################
################################################################################
####################Neighbors Analysis from borders non protected areas #######
seldata <- data[protected_areas_sd==1]
path <- file.path(micro, "neighbours.csv")
neighs <- fread(path)
regreen <- neighs[refer == "green",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
# regreen$distance_km <- regreen$distance_km*-1
# regreen[, quintile := cut(
#   distance_km,
#   breaks = quantile(distance_km, probs = seq(0, 1, 0.33), na.rm = TRUE),
#   include.lowest = TRUE,
#   labels = FALSE
# )]
regreen$distance_km <- regreen$distance_km*-1
regreen[, quintile := cut(
distance_km,
breaks = c(0, -16, -32, -50),
include.lowest = TRUE,
labels = c(3, 2, 1)
)]
regreen$quintile <- as.numeric(regreen$quintile)
table(regreen$quintile)
regreen$quintile <- regreen$quintile *-1
refp <- neighs[refer == "purple",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
# refp[, quintile := cut(
#   distance_km,
#   breaks = quantile(distance_km, probs = seq(0, 1, 0.33), na.rm = TRUE),
#   include.lowest = TRUE,
#   labels = FALSE
# )]
refp[, quintile := cut(
distance_km,
breaks = c(0, 16, 32, 50),
include.lowest = TRUE,
labels = c(1, 2, 3)
)]
refp$quintile <- as.numeric(refp$quintile)
table(refp$quintile)
neighs_seldata <- rbind(regreen, refp )
neighs_seldata <- rbind(regreen, refp )
# Step 1: Clean names
setnames(
neighs_seldata,
old = c("pc11_s_id_neigh", "pc11_d_id_neigh", "pc11_sd_id_neigh"),
new = c("pc11_s_id", "pc11_d_id", "pc11_sd_id")
)
neighs_seldata[quintile == -1, ]$quintile <- -2
# Step 2: Quintiles of distance_km
# Keep track of which subdistricts have already been used
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_seldata$quintile))) {
ids_q <- unique(neighs_seldata[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
seldata,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "peragri",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data        = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c( "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_seldata[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
results_dt$mean_distance <- c(-40, -24, 8, 24, 40)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "darkgreen"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Agriculture Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)
)
ggsave(
filename = file.path(
out_dir,
sprintf("neighs_agri_nonpr.png")
),
plot   = p,
width  = 8,
height = 6,
dpi    = 300
)
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_seldata$quintile))) {
ids_q <- unique(neighs_seldata[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
seldata,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "tree.mcq",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_seldata[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
results_dt$mean_distance <- c(-40, -24, 8, 24, 40)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "darkgreen"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Forest Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)
)
ggsave(
filename = file.path(
out_dir,
sprintf("neighs_tree_nonpro.png")
),
plot   = p,
width  = 8,
height = 6,
dpi    = 300
)
################################################################################
######################################################################################################
# Code for reproducing the simulation results in the paper and appendix
# Authors: Kaspar Wuthrich and Ying Zhu
# DISCLAIMER: This software is provided "as is" without warranty of any kind, expressed or implied.
# Questions/error reports: kwuthrich@ucsd.edu
######################################################################################################
rm(list = ls())
setwd("C:/Users/187697/Documents/GitHub/master_thesis")
library(hdm)
library(glmnet)
library(sandwich)
library(foreach)
library(doParallel)
library(DoubleML)
library(mlr3)
library(mlr3learners)
# ncores <- detectCores()-1
ncores <- 10
cl     <- makeCluster(ncores)
registerDoParallel(cl)
