setwd("~/Dropbox (Personal)/Active/Research/RFInference/MLPnP/Data Set/401K")
###########################################################################################################################
#  This is an example of ATE estimation of 401(k) eligibility on accumulated assets using Double Machine Learning Methods
#  References: "Double/Debiased Machine Learning of Treatment and Causal Parameters",  AER P&P 2017
#              "Double Machine Learning for Treatment and Causal Parameters",  Arxiv 2016
# Data source: SIPP 1991 (Abadie, 2003)
# Description of the data: the sample selection and variable contruction follow
# Abadie, Alberto (2003), "Semiparametric instrumental variable estimation of treatment response
# models," Journal of Econometrics, Elsevier, vol. 113(2), pages 231-263, April.
# The variables in the data set include:
# net_tfa:  net total financial assets
# e401:     = 1 if employer offers 401(k)
# age
# inc:      income
# fsize:    family size
# educ:     years of education
# db:       = 1 if indivuduals has defined benefit pension
# marr:     = 1 if married
# twoearn:  = 1 if two-earner household
# pira:     = 1 if individual participates in IRA plan
# hown      = 1 if home owner
###########################################################################################################################
###################### Loading packages ###########################
library(foreign);
library(quantreg);
library(mnormt);
library(gbm);
library(glmnet);
library(MASS);
library(rpart);
library(doParallel)
library(sandwich);
library(hdm);
library(randomForest);
library(nnet)
library(matrixStats)
library(quadprog)
library(doSNOW)
###################### Loading functions and Data ##############################
rm(list = ls())  # Clear everything out so we're starting clean
source("ML_Functions.R")
source("Moment_Functions.R")
options(warn=-1)
set.seed(1211);
cl   <- makeCluster(12, outfile="")
registerDoSNOW(cl)
data  <- read.dta("sipp1991.dta");
################################ Inputs ########################################
# Outcome Variable
y      <- "net_tfa";
# Treatment Indicator
d      <- "e401";
# Controls
x      <- "age + inc + educ + fsize + marr + twoearn + db + pira + hown" # use this for tree-based methods like forests and boosted trees
xl     <- "(poly(age, 6, raw=TRUE) + poly(inc, 8, raw=TRUE) + poly(educ, 4, raw=TRUE) + poly(fsize, 2, raw=TRUE) + marr + twoearn + db + pira + hown)^2";  # use this for rlasso etc.
# Method names: Boosting, Nnet, RLasso, PostRLasso, Forest, Trees, Ridge, Lasso, Elnet, Ensemble
Boosting     <- list(bag.fraction = .5, train.fraction = 1.0, interaction.depth=2, n.trees=1000, shrinkage=.01, n.cores=1, cv.folds=5, verbose = FALSE, clas_dist= 'adaboost', reg_dist='gaussian')
Forest       <- list(clas_nodesize=1, reg_nodesize=5, ntree=1000, na.action=na.omit, replace=TRUE)
RLasso       <- list(penalty = list(homoscedastic = FALSE, X.dependent.lambda =FALSE, lambda.start = NULL, c = 1.1), intercept = TRUE)
Nnet         <- list(size=8,  maxit=1000, decay=0.01, MaxNWts=10000,  trace=FALSE)
Trees        <- list(reg_method="anova", clas_method="class")
arguments    <- list(Boosting=Boosting, Forest=Forest, RLasso=RLasso, Nnet=Nnet, Trees=Trees)
ensemble     <- list(methods=c("RLasso", "Boosting", "Forest", "Nnet"))              # specify the methods for the ensemble estimation
methods      <- c("RLasso","Trees", "Forest", "Boosting", "Nnet", "Ensemble")        # method names to be estimated
ite          <- 100                                                                  # number of iteration
################################ Estimation ##################################################
r <- foreach(k = 1:ite, .combine='rbind', .inorder=FALSE, .packages=c('MASS','randomForest','neuralnet','gbm', 'sandwich', 'hdm', 'nnet', 'rpart','glmnet')) %dopar% {
# table 1-2, Panel B, 2 fold
res <- DoubleML(data, y, d, x, xl, methods=methods, nfold=2, est="plinear", arguments=arguments, ensemble=ensemble, silent=FALSE)
# table 1-2, Panel B, 5 fold
#res <- DoubleML(data, y, d, x, xl, methods=methods, nfold=5, est="plinear", arguments=arguments, ensemble=ensemble, silent=FALSE)
# table 1-2, Panel A, 2 fold
#res <- DoubleML(data, y, d, x, xl, methods=methods, nfold=2, est="interactive", arguments=arguments, ensemble=ensemble, silent=FALSE, trim=c(0.01,0.99))
# table 1-2, Panel A, 5 fold
#res <- DoubleML(data, y, d, x, xl, methods=methods, nfold=5, est="interactive", arguments=arguments, ensemble=ensemble, silent=FALSE, trim=c(0.01,0.99))
data.frame(t(res[1,]), t(res[2,]))
}
