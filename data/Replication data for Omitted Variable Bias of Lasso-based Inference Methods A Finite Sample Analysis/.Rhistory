neighs_data,
old = c("pc11_s_id_neigh", "pc11_d_id_neigh", "pc11_sd_id_neigh"),
new = c("pc11_s_id", "pc11_d_id", "pc11_sd_id")
)
# Step 2: Quintiles of distance_km
# Keep track of which subdistricts have already been used
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_data$quintile))) {
ids_q <- unique(neighs_data[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
data,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "peragri",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data          = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("nevertreated", "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_data[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "green"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Agriculture Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)    # y-axis tick labels
)
p
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_data$quintile))) {
ids_q <- unique(neighs_data[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
data,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "tree.mcq",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data          = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("nevertreated", "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_data[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "green"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Forest Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)    # y-axis tick labels
)
p
path <- file.path(micro, "0_sd_data_generation.csv")
data <- fread(path)
names(data)
data$peragri <- data$peragri*100
data$tree.mcq <- data$tree.mcq*100
data$perbarren <- data$perbarren * 10000
##########
################################################################################
#############################Neighbours Analysis from borders ##################
data <- data[protected_areas_sd==1]
path <- file.path(micro, "neighbours.csv")
neighs <- fread(path)
regreen <- neighs[refer == "green",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
regreen$distance_km <- regreen$distance_km*-1
regreen[, quintile := cut(
distance_km,
breaks = quantile(distance_km, probs = seq(0, 1, 0.33), na.rm = TRUE),
include.lowest = TRUE,
labels = FALSE
)]
regreen$quintile <- regreen$quintile*-1
refp <- neighs[refer == "purple",
.(distance_km = min(distance_km, na.rm = TRUE)),
by = .(pc11_s_id_neigh, pc11_d_id_neigh, pc11_sd_id_neigh)
]
refp[, quintile := cut(
distance_km,
breaks = quantile(distance_km, probs = seq(0, 1, 0.33), na.rm = TRUE),
include.lowest = TRUE,
labels = FALSE
)]
neighs_data <- rbind(regreen, refp )
library(data.table)
# Step 1: Clean names
setnames(
neighs_data,
old = c("pc11_s_id_neigh", "pc11_d_id_neigh", "pc11_sd_id_neigh"),
new = c("pc11_s_id", "pc11_d_id", "pc11_sd_id")
)
# Step 2: Quintiles of distance_km
# Keep track of which subdistricts have already been used
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_data$quintile))) {
ids_q <- unique(neighs_data[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
data,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "peragri",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data          = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("nevertreated", "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_data[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "green"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Agriculture Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)    # y-axis tick labels
)
p
used_ids <- data.table(pc11_s_id = integer(),
pc11_d_id = integer(),
pc11_sd_id = integer())
results <- list()
for (q in sort(unique(neighs_data$quintile))) {
ids_q <- unique(neighs_data[quintile == q, .(pc11_s_id, pc11_d_id, pc11_sd_id)])
new_ids <- fsetdiff(ids_q, used_ids)
used_ids <- rbind(used_ids, new_ids)
merged <- merge(
data,
new_ids,
by = c("pc11_s_id", "pc11_d_id", "pc11_sd_id"),
all.x = FALSE
)
out <- att_gt(
yname         = "tree.mcq",
gname         = "min_year_post_ror",
idname        = "subdistrict_id",
tname         = "year",
xformla       = ~1 + peragri2010,
data          = merged,
base_period   = "universal",
est_method    = "dr",
cluster       = "subdistrict_id",
control_group = c("nevertreated", "notyettreated")
)
es  <- aggte(out, na.rm = TRUE)
ate <- es$overall.att
se  <- es$overall.se
ci_low  <- ate - 1.96 * se
ci_high <- ate + 1.96 * se
# mean distance for this quintile
mean_dist <- mean(neighs_data[quintile == q, distance_km], na.rm = TRUE)
# store
results[[as.character(q)]] <- data.table(
quintile = q,
mean_distance = mean_dist,
ate = ate,
ci_low = ci_low,
ci_high = ci_high
)
}
results_dt <- rbindlist(results)
p <- ggplot(results_dt, aes(x = mean_distance, y = ate,
ymin = ci_low, ymax = ci_high,
color = quintile > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # y=0 line
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +  # x=0 line
scale_color_manual(
values = c("FALSE" = "purple", "TRUE" = "green"),
labels = c("Low Agri and Forest", "Low Agri and High Forest"),
name   = "Neighbour"
) +
labs(
x = "Distance (Km) to the Border (Terciles)",
y = "ATE on Forest Extent"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 16),
legend.text  = element_text(size = 16)
) +
theme(
axis.title.x = element_text(size = 20),   # x-axis title
axis.title.y = element_text(size = 20),   # y-axis title
axis.text.x  = element_text(size = 18),   # x-axis tick labels
axis.text.y  = element_text(size = 18)    # y-axis tick labels
)
p
data <- fread(path)
table(data[year == 2003]$protected_areas_sd)
table(data[year == 2003,]$protected_areas_sd)
df1 <- data[year == 2003,]
data <- fread(path)
df1 <- data[year == 2003,]
df1 <- data[data$year == 2003,]
table(df1$protected_areas_sd)
df1
path <- file.path(micro, "0_sd_data_generation.csv")
data <- fread(path)
data
################################################################################
rm(list = ls())
library(data.table)
# library(panelView)
library(fixest)
# library(did)
# library(DIDmultiplegtDYN)
library(dplyr)
library(gridExtra)
# library(ggplotify)
library(ggplot2)
library(grid)
library(ggfixest)
library(haven)
library(collapse)
library(marginaleffects)
# library(data.table)
# library(ggplot2)
# library(broom)
# library(fixest)
# library(fixest)
# library(ggplot2)
# library(did)
# library(xtable)
# library(ggfixest)
# library(patchwork) # for wrap_plots()
# library(gridExtra)
################################################################################
# pacman::p_load(tidyverse, ggthemes, rio,
#                geomtextpath, gghighlight, data.table,
#                collapse, fixest, modelsummary)
################################################################################
####################### Setting working directory ##############################
dbox_root <- 'C:/Users/187697/Dropbox/sa_fires'
shell_root <- '/groups/sgulzar/sa_fires'
root <- dbox_root
int_farms <- file.path( root, 'proj_bureaucrats_farms/data_output/intermediate')
table_farms <- file.path(root, 'proj_bureaucrats_farms/tex/paper/tables')
figure_farms <- file.path(root, 'proj_bureaucrats_farms/tex/paper/figures')
################################################################################
df.orig <- fread( file.path( int_farms, '0_master_merge_data_gen.csv') )
df.final <- df.orig[, .(province, unique_small_grid_id, year, month, ac_uq_id,
av_wind_speed, wind_direction, monthyear, count, downup_ac,
rice_prod_aclvl_ahigh, rice_area_aclvl_ahigh, self_profession )]
df.final$count.k <- df.final$count * 1000
cluster.grid <- fread( file.path( int_farms, '8_grids_ac_pr_5km.csv') )
df.final <- merge(df.final, cluster.grid,
all.x=TRUE,
by=c("unique_small_grid_id"), )
df.final[is.na(protest_place),]$protest_place <- 0
df.final$pr.cl.tr <- 0
df.final[ year > yr_pr_5km, ]$pr.cl.tr <- 1
df.final[ year == yr_pr_5km & month >= mt_pr_5km, ]$pr.cl.tr <- 1
df.final[, ac_area_tr := .GRP, by = .(protest_place, ac_uq_id)]
df.final <- df.final[unique_small_grid_id != 116147,]
df.reg <- df.final[year < 2022 | ( year == 2022 & month <= 8)]
election_year <- fread( file.path( int_farms, 'panel_data_election_year.csv') )
election_year <- unique(election_year[,.(state, election_year, year, month, start_period )])
setnames(election_year, 'state', 'province')
election_year$province <- stringr::str_to_title(election_year$province)
election_year[province=='Punjab', ]$province <- 'Punjab_IND'
df.reg <- merge(df.reg, election_year, all.x=TRUE, c('province', 'year', 'month'))
df.reg[, current_total_months := year * 12 + month]
df.reg[, `:=`(
start_year = start_period %/% 100,
start_month = start_period %% 100
)]
df.reg[, start_total_months := start_year * 12 + start_month]
df.reg[, yeargov := floor((current_total_months - start_total_months) / 12)]
dep_var <- "count.k"
rhs     <- "i(pr.cl.tr, downup_ac, ref = 0) + i(pr.cl.tr, ref = 0) + i(downup_ac, ref = 0) + av_wind_speed + wind_direction"
# List of FE specs
fe_list <- list(
'unique_small_grid_id + month^year',
'unique_small_grid_id + month^year + yeargov ',
'unique_small_grid_id + month^year + yeargov + province[monthyear]'
)
# List of clustering
cluster_list <- list(
~ ac_area_tr
)
# Define filters (names + conditions as expressions)
filter_list <- list(
"all"           = quote(TRUE)
)
# Build mapping of (filter, fe, cluster)
mapping <- expand.grid(
feidx = seq_along(fe_list),
fidx  = seq_along(filter_list),
clidx = seq_along(cluster_list)
)
estimates <- vector("list", dim(mapping)[1])
ymean <- numeric()
num.acs <- numeric()
for (task_id in 1:nrow(mapping)){
fidx  <- mapping$fidx[task_id]
feidx <- mapping$feidx[task_id]
clidx <- mapping$clidx[task_id]
# Apply filter
filter_expr <- filter_list[[fidx]]
fesel <- fe_list[[feidx]]
fml <- as.formula( paste(dep_var, "~", rhs, "|", fesel))
estimates[[task_id]] <- feols(fml, data = df.reg[eval(filter_expr)], cluster = cluster_list[[clidx]] )
y0 <- round(mean(df.reg[ eval(filter_expr) & pr.cl.tr==0,]$count.k), 3)
ymean <- c(ymean, y0)
acs <- length(unique(df.reg[ eval(filter_expr)]$ac_uq_id))
num.acs <- c(num.acs, acs)
print(task_id)
}
treatmap =c(
# GFC
"count.k" = "Number of Fires (1000)",
"downup_ac::1:ac_hw" = "DownupAC $\\times$ National Highway",
"pr2km.achw.downup" = "Protest Absr $\\times$ DownupAC $\\times$ National Highway",
"pr.cl.tr::1:downup_ac " = "Protest Absr $\\times$ DownupAC",
"pr.cl.tr::1:ac_hw" = "Protest Absr $\\times$ National Highway",
"province^yeargov^election_year" = "Assembly Gov. Year FE",
"province^election_year" = "Assembly FE",
"pr.cl.tr::1" = "Protest 5km",
"unique_small_grid_id"   = "Grid",
"province[monthyear]" = "Province Trend",
# VCF
"ac_uq_id^monthyear" = "AC $\\times$ MonthYear",
"province^monthyear" = "Province $\\times$ MonthYear",
"distr_id^monthyear" = "District $\\times$ MonthYear",
"D_5protest_1yr"  = "1 Yr 5 Protests",
"pr.cl.tr5"  = "5 Protests Absr",
"downup_ac"       = "DownupAC",
"monthyear"    = "MonthYear"
)
desc = "Effect of Protests around 5km on Number of Fires"
fn = "regs_all_main"; lab = "tab:protest_treat_main";
# %%
fitstat_register("n_new", function(x) summary( x )$nobs ,
"Observations")
star_levels <- c("***" = 0.01,
"**"  = 0.05,
"*"   = 0.1)
etable(estimates,
style.tex = style.tex(main = "base",
depvar.title = "",
model.title = "",
var.title = "\\midrule",
slopes.title = "\\midrule \\emph{Time Trends}",
yesNo = c("Y", "N"),
signif.code = star_levels,
line.bottom = "\\midrule \\midrule"),
signif.code = star_levels,
fixef_sizes = T,
fixef_sizes.simplify = F,
fitstat = c( "n_new" ),
tex = TRUE,
dict = treatmap,
keep = c("%pr.cl.tr", "%downup_ac"),
label = lab,
title = desc,
notes = "",
extralines=list(
"\\hline Mean Y0"=ymean, "Assembly" = num.acs
),
file = file.path(table_farms, glue::glue("10_pr_cluster_2022_5kmtable_did2.tex")), replace = TRUE)
gen_design
